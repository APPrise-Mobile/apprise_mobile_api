<?php
/**
 * ContentFeedProfile
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * APPrise Mobile API
 *
 * API for APPrise Mobile Clients
 *
 * OpenAPI spec version: 2.0.0
 * Contact: customercare@apprise-mobile.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ContentFeedProfile Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ContentFeedProfile implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ContentFeedProfile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_id' => '\Swagger\Client\Model\CalendarPropertiesId',
        'owner' => '\Swagger\Client\Model\CalendarPropertiesId',
        'account' => '\Swagger\Client\Model\CalendarPropertiesId',
        'created' => '\Swagger\Client\Model\CalendarPropertiesCreated',
        'modified' => '\Swagger\Client\Model\CalendarPropertiesCreated',
        'modified_by' => '\Swagger\Client\Model\CalendarPropertiesId',
        'name' => 'string',
        'short_name' => 'string',
        'long_name' => 'string',
        'admins' => '\Swagger\Client\Model\CalendarPropertiesId[]',
        'privacy_policy' => 'string',
        'privacy_policy_enabled' => 'bool',
        'user_registration' => 'bool',
        'desc' => 'string',
        'date_format' => 'string',
        'primary_color' => 'string',
        'logo_s3_key' => 'string',
        'logo_s3_url' => 'string',
        'header_color' => 'string',
        'social_links' => '\Swagger\Client\Model\ContentFeedProfileSocialLinks[]',
        'web_url' => '\Swagger\Client\Model\ContentPropertiesWebUrl',
        'contact_info' => '\Swagger\Client\Model\ContentFeedProfileContactInfo',
        'home_folder' => '\Swagger\Client\Model\CalendarPropertiesId',
        'everyone_group' => '\Swagger\Client\Model\CalendarPropertiesId',
        'calendars' => '\Swagger\Client\Model\ContentFeedProfileCalendars[]',
        'content_folders' => '\Swagger\Client\Model\ContentFeedProfileContentFolders[]',
        'missing_link_folders' => '\Swagger\Client\Model\ContentFeedProfileContentFolders[]',
        'missing_link_calendars' => '\Swagger\Client\Model\ContentFeedProfileCalendars[]',
        'content' => '\Swagger\Client\Model\ContentFeedProfileContent[]',
        'events' => '\Swagger\Client\Model\CalendarPropertiesId[]',
        'groups' => '\Swagger\Client\Model\CalendarPropertiesId[]',
        'carousel' => '\Swagger\Client\Model\ContentFeedProfileCarousel[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'owner' => 'owner',
        'account' => 'account',
        'created' => 'created',
        'modified' => 'modified',
        'modified_by' => 'modifiedBy',
        'name' => 'name',
        'short_name' => 'shortName',
        'long_name' => 'longName',
        'admins' => 'admins',
        'privacy_policy' => 'privacyPolicy',
        'privacy_policy_enabled' => 'privacyPolicyEnabled',
        'user_registration' => 'userRegistration',
        'desc' => 'desc',
        'date_format' => 'dateFormat',
        'primary_color' => 'primaryColor',
        'logo_s3_key' => 'logoS3Key',
        'logo_s3_url' => 'logoS3Url',
        'header_color' => 'headerColor',
        'social_links' => 'socialLinks',
        'web_url' => 'webUrl',
        'contact_info' => 'contactInfo',
        'home_folder' => 'homeFolder',
        'everyone_group' => 'everyoneGroup',
        'calendars' => 'calendars',
        'content_folders' => 'contentFolders',
        'missing_link_folders' => 'missingLinkFolders',
        'missing_link_calendars' => 'missingLinkCalendars',
        'content' => 'content',
        'events' => 'events',
        'groups' => 'groups',
        'carousel' => 'carousel'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'owner' => 'setOwner',
        'account' => 'setAccount',
        'created' => 'setCreated',
        'modified' => 'setModified',
        'modified_by' => 'setModifiedBy',
        'name' => 'setName',
        'short_name' => 'setShortName',
        'long_name' => 'setLongName',
        'admins' => 'setAdmins',
        'privacy_policy' => 'setPrivacyPolicy',
        'privacy_policy_enabled' => 'setPrivacyPolicyEnabled',
        'user_registration' => 'setUserRegistration',
        'desc' => 'setDesc',
        'date_format' => 'setDateFormat',
        'primary_color' => 'setPrimaryColor',
        'logo_s3_key' => 'setLogoS3Key',
        'logo_s3_url' => 'setLogoS3Url',
        'header_color' => 'setHeaderColor',
        'social_links' => 'setSocialLinks',
        'web_url' => 'setWebUrl',
        'contact_info' => 'setContactInfo',
        'home_folder' => 'setHomeFolder',
        'everyone_group' => 'setEveryoneGroup',
        'calendars' => 'setCalendars',
        'content_folders' => 'setContentFolders',
        'missing_link_folders' => 'setMissingLinkFolders',
        'missing_link_calendars' => 'setMissingLinkCalendars',
        'content' => 'setContent',
        'events' => 'setEvents',
        'groups' => 'setGroups',
        'carousel' => 'setCarousel'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'owner' => 'getOwner',
        'account' => 'getAccount',
        'created' => 'getCreated',
        'modified' => 'getModified',
        'modified_by' => 'getModifiedBy',
        'name' => 'getName',
        'short_name' => 'getShortName',
        'long_name' => 'getLongName',
        'admins' => 'getAdmins',
        'privacy_policy' => 'getPrivacyPolicy',
        'privacy_policy_enabled' => 'getPrivacyPolicyEnabled',
        'user_registration' => 'getUserRegistration',
        'desc' => 'getDesc',
        'date_format' => 'getDateFormat',
        'primary_color' => 'getPrimaryColor',
        'logo_s3_key' => 'getLogoS3Key',
        'logo_s3_url' => 'getLogoS3Url',
        'header_color' => 'getHeaderColor',
        'social_links' => 'getSocialLinks',
        'web_url' => 'getWebUrl',
        'contact_info' => 'getContactInfo',
        'home_folder' => 'getHomeFolder',
        'everyone_group' => 'getEveryoneGroup',
        'calendars' => 'getCalendars',
        'content_folders' => 'getContentFolders',
        'missing_link_folders' => 'getMissingLinkFolders',
        'missing_link_calendars' => 'getMissingLinkCalendars',
        'content' => 'getContent',
        'events' => 'getEvents',
        'groups' => 'getGroups',
        'carousel' => 'getCarousel'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_id'] = isset($data['_id']) ? $data['_id'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
        $this->container['modified_by'] = isset($data['modified_by']) ? $data['modified_by'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['short_name'] = isset($data['short_name']) ? $data['short_name'] : null;
        $this->container['long_name'] = isset($data['long_name']) ? $data['long_name'] : null;
        $this->container['admins'] = isset($data['admins']) ? $data['admins'] : null;
        $this->container['privacy_policy'] = isset($data['privacy_policy']) ? $data['privacy_policy'] : null;
        $this->container['privacy_policy_enabled'] = isset($data['privacy_policy_enabled']) ? $data['privacy_policy_enabled'] : null;
        $this->container['user_registration'] = isset($data['user_registration']) ? $data['user_registration'] : null;
        $this->container['desc'] = isset($data['desc']) ? $data['desc'] : null;
        $this->container['date_format'] = isset($data['date_format']) ? $data['date_format'] : null;
        $this->container['primary_color'] = isset($data['primary_color']) ? $data['primary_color'] : null;
        $this->container['logo_s3_key'] = isset($data['logo_s3_key']) ? $data['logo_s3_key'] : null;
        $this->container['logo_s3_url'] = isset($data['logo_s3_url']) ? $data['logo_s3_url'] : null;
        $this->container['header_color'] = isset($data['header_color']) ? $data['header_color'] : null;
        $this->container['social_links'] = isset($data['social_links']) ? $data['social_links'] : null;
        $this->container['web_url'] = isset($data['web_url']) ? $data['web_url'] : null;
        $this->container['contact_info'] = isset($data['contact_info']) ? $data['contact_info'] : null;
        $this->container['home_folder'] = isset($data['home_folder']) ? $data['home_folder'] : null;
        $this->container['everyone_group'] = isset($data['everyone_group']) ? $data['everyone_group'] : null;
        $this->container['calendars'] = isset($data['calendars']) ? $data['calendars'] : null;
        $this->container['content_folders'] = isset($data['content_folders']) ? $data['content_folders'] : null;
        $this->container['missing_link_folders'] = isset($data['missing_link_folders']) ? $data['missing_link_folders'] : null;
        $this->container['missing_link_calendars'] = isset($data['missing_link_calendars']) ? $data['missing_link_calendars'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['events'] = isset($data['events']) ? $data['events'] : null;
        $this->container['groups'] = isset($data['groups']) ? $data['groups'] : null;
        $this->container['carousel'] = isset($data['carousel']) ? $data['carousel'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['_id'] === null) {
            $invalid_properties[] = "'_id' can't be null";
        }
        if ($this->container['account'] === null) {
            $invalid_properties[] = "'account' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalid_properties[] = "'created' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if (!is_null($this->container['primary_color']) && !preg_match("/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/", $this->container['primary_color'])) {
            $invalid_properties[] = "invalid value for 'primary_color', must be conform to the pattern /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.";
        }

        if (!is_null($this->container['header_color']) && !preg_match("/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/", $this->container['header_color'])) {
            $invalid_properties[] = "invalid value for 'header_color', must be conform to the pattern /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['_id'] === null) {
            return false;
        }
        if ($this->container['account'] === null) {
            return false;
        }
        if ($this->container['created'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if (!preg_match("/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/", $this->container['primary_color'])) {
            return false;
        }
        if (!preg_match("/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/", $this->container['header_color'])) {
            return false;
        }
        return true;
    }


    /**
     * Gets _id
     * @return \Swagger\Client\Model\CalendarPropertiesId
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     * @param \Swagger\Client\Model\CalendarPropertiesId $_id
     * @return $this
     */
    public function setId($_id)
    {
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets owner
     * @return \Swagger\Client\Model\CalendarPropertiesId
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     * @param \Swagger\Client\Model\CalendarPropertiesId $owner
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets account
     * @return \Swagger\Client\Model\CalendarPropertiesId
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     * @param \Swagger\Client\Model\CalendarPropertiesId $account
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets created
     * @return \Swagger\Client\Model\CalendarPropertiesCreated
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     * @param \Swagger\Client\Model\CalendarPropertiesCreated $created
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     * @return \Swagger\Client\Model\CalendarPropertiesCreated
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     * @param \Swagger\Client\Model\CalendarPropertiesCreated $modified
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets modified_by
     * @return \Swagger\Client\Model\CalendarPropertiesId
     */
    public function getModifiedBy()
    {
        return $this->container['modified_by'];
    }

    /**
     * Sets modified_by
     * @param \Swagger\Client\Model\CalendarPropertiesId $modified_by
     * @return $this
     */
    public function setModifiedBy($modified_by)
    {
        $this->container['modified_by'] = $modified_by;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets short_name
     * @return string
     */
    public function getShortName()
    {
        return $this->container['short_name'];
    }

    /**
     * Sets short_name
     * @param string $short_name
     * @return $this
     */
    public function setShortName($short_name)
    {
        $this->container['short_name'] = $short_name;

        return $this;
    }

    /**
     * Gets long_name
     * @return string
     */
    public function getLongName()
    {
        return $this->container['long_name'];
    }

    /**
     * Sets long_name
     * @param string $long_name
     * @return $this
     */
    public function setLongName($long_name)
    {
        $this->container['long_name'] = $long_name;

        return $this;
    }

    /**
     * Gets admins
     * @return \Swagger\Client\Model\CalendarPropertiesId[]
     */
    public function getAdmins()
    {
        return $this->container['admins'];
    }

    /**
     * Sets admins
     * @param \Swagger\Client\Model\CalendarPropertiesId[] $admins
     * @return $this
     */
    public function setAdmins($admins)
    {
        $this->container['admins'] = $admins;

        return $this;
    }

    /**
     * Gets privacy_policy
     * @return string
     */
    public function getPrivacyPolicy()
    {
        return $this->container['privacy_policy'];
    }

    /**
     * Sets privacy_policy
     * @param string $privacy_policy
     * @return $this
     */
    public function setPrivacyPolicy($privacy_policy)
    {
        $this->container['privacy_policy'] = $privacy_policy;

        return $this;
    }

    /**
     * Gets privacy_policy_enabled
     * @return bool
     */
    public function getPrivacyPolicyEnabled()
    {
        return $this->container['privacy_policy_enabled'];
    }

    /**
     * Sets privacy_policy_enabled
     * @param bool $privacy_policy_enabled
     * @return $this
     */
    public function setPrivacyPolicyEnabled($privacy_policy_enabled)
    {
        $this->container['privacy_policy_enabled'] = $privacy_policy_enabled;

        return $this;
    }

    /**
     * Gets user_registration
     * @return bool
     */
    public function getUserRegistration()
    {
        return $this->container['user_registration'];
    }

    /**
     * Sets user_registration
     * @param bool $user_registration
     * @return $this
     */
    public function setUserRegistration($user_registration)
    {
        $this->container['user_registration'] = $user_registration;

        return $this;
    }

    /**
     * Gets desc
     * @return string
     */
    public function getDesc()
    {
        return $this->container['desc'];
    }

    /**
     * Sets desc
     * @param string $desc
     * @return $this
     */
    public function setDesc($desc)
    {
        $this->container['desc'] = $desc;

        return $this;
    }

    /**
     * Gets date_format
     * @return string
     */
    public function getDateFormat()
    {
        return $this->container['date_format'];
    }

    /**
     * Sets date_format
     * @param string $date_format
     * @return $this
     */
    public function setDateFormat($date_format)
    {
        $this->container['date_format'] = $date_format;

        return $this;
    }

    /**
     * Gets primary_color
     * @return string
     */
    public function getPrimaryColor()
    {
        return $this->container['primary_color'];
    }

    /**
     * Sets primary_color
     * @param string $primary_color
     * @return $this
     */
    public function setPrimaryColor($primary_color)
    {

        if (!is_null($primary_color) && (!preg_match("/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/", $primary_color))) {
            throw new \InvalidArgumentException("invalid value for $primary_color when calling ContentFeedProfile., must conform to the pattern /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.");
        }

        $this->container['primary_color'] = $primary_color;

        return $this;
    }

    /**
     * Gets logo_s3_key
     * @return string
     */
    public function getLogoS3Key()
    {
        return $this->container['logo_s3_key'];
    }

    /**
     * Sets logo_s3_key
     * @param string $logo_s3_key
     * @return $this
     */
    public function setLogoS3Key($logo_s3_key)
    {
        $this->container['logo_s3_key'] = $logo_s3_key;

        return $this;
    }

    /**
     * Gets logo_s3_url
     * @return string
     */
    public function getLogoS3Url()
    {
        return $this->container['logo_s3_url'];
    }

    /**
     * Sets logo_s3_url
     * @param string $logo_s3_url
     * @return $this
     */
    public function setLogoS3Url($logo_s3_url)
    {
        $this->container['logo_s3_url'] = $logo_s3_url;

        return $this;
    }

    /**
     * Gets header_color
     * @return string
     */
    public function getHeaderColor()
    {
        return $this->container['header_color'];
    }

    /**
     * Sets header_color
     * @param string $header_color
     * @return $this
     */
    public function setHeaderColor($header_color)
    {

        if (!is_null($header_color) && (!preg_match("/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/", $header_color))) {
            throw new \InvalidArgumentException("invalid value for $header_color when calling ContentFeedProfile., must conform to the pattern /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.");
        }

        $this->container['header_color'] = $header_color;

        return $this;
    }

    /**
     * Gets social_links
     * @return \Swagger\Client\Model\ContentFeedProfileSocialLinks[]
     */
    public function getSocialLinks()
    {
        return $this->container['social_links'];
    }

    /**
     * Sets social_links
     * @param \Swagger\Client\Model\ContentFeedProfileSocialLinks[] $social_links
     * @return $this
     */
    public function setSocialLinks($social_links)
    {
        $this->container['social_links'] = $social_links;

        return $this;
    }

    /**
     * Gets web_url
     * @return \Swagger\Client\Model\ContentPropertiesWebUrl
     */
    public function getWebUrl()
    {
        return $this->container['web_url'];
    }

    /**
     * Sets web_url
     * @param \Swagger\Client\Model\ContentPropertiesWebUrl $web_url
     * @return $this
     */
    public function setWebUrl($web_url)
    {
        $this->container['web_url'] = $web_url;

        return $this;
    }

    /**
     * Gets contact_info
     * @return \Swagger\Client\Model\ContentFeedProfileContactInfo
     */
    public function getContactInfo()
    {
        return $this->container['contact_info'];
    }

    /**
     * Sets contact_info
     * @param \Swagger\Client\Model\ContentFeedProfileContactInfo $contact_info
     * @return $this
     */
    public function setContactInfo($contact_info)
    {
        $this->container['contact_info'] = $contact_info;

        return $this;
    }

    /**
     * Gets home_folder
     * @return \Swagger\Client\Model\CalendarPropertiesId
     */
    public function getHomeFolder()
    {
        return $this->container['home_folder'];
    }

    /**
     * Sets home_folder
     * @param \Swagger\Client\Model\CalendarPropertiesId $home_folder
     * @return $this
     */
    public function setHomeFolder($home_folder)
    {
        $this->container['home_folder'] = $home_folder;

        return $this;
    }

    /**
     * Gets everyone_group
     * @return \Swagger\Client\Model\CalendarPropertiesId
     */
    public function getEveryoneGroup()
    {
        return $this->container['everyone_group'];
    }

    /**
     * Sets everyone_group
     * @param \Swagger\Client\Model\CalendarPropertiesId $everyone_group
     * @return $this
     */
    public function setEveryoneGroup($everyone_group)
    {
        $this->container['everyone_group'] = $everyone_group;

        return $this;
    }

    /**
     * Gets calendars
     * @return \Swagger\Client\Model\ContentFeedProfileCalendars[]
     */
    public function getCalendars()
    {
        return $this->container['calendars'];
    }

    /**
     * Sets calendars
     * @param \Swagger\Client\Model\ContentFeedProfileCalendars[] $calendars
     * @return $this
     */
    public function setCalendars($calendars)
    {
        $this->container['calendars'] = $calendars;

        return $this;
    }

    /**
     * Gets content_folders
     * @return \Swagger\Client\Model\ContentFeedProfileContentFolders[]
     */
    public function getContentFolders()
    {
        return $this->container['content_folders'];
    }

    /**
     * Sets content_folders
     * @param \Swagger\Client\Model\ContentFeedProfileContentFolders[] $content_folders
     * @return $this
     */
    public function setContentFolders($content_folders)
    {
        $this->container['content_folders'] = $content_folders;

        return $this;
    }

    /**
     * Gets missing_link_folders
     * @return \Swagger\Client\Model\ContentFeedProfileContentFolders[]
     */
    public function getMissingLinkFolders()
    {
        return $this->container['missing_link_folders'];
    }

    /**
     * Sets missing_link_folders
     * @param \Swagger\Client\Model\ContentFeedProfileContentFolders[] $missing_link_folders
     * @return $this
     */
    public function setMissingLinkFolders($missing_link_folders)
    {
        $this->container['missing_link_folders'] = $missing_link_folders;

        return $this;
    }

    /**
     * Gets missing_link_calendars
     * @return \Swagger\Client\Model\ContentFeedProfileCalendars[]
     */
    public function getMissingLinkCalendars()
    {
        return $this->container['missing_link_calendars'];
    }

    /**
     * Sets missing_link_calendars
     * @param \Swagger\Client\Model\ContentFeedProfileCalendars[] $missing_link_calendars
     * @return $this
     */
    public function setMissingLinkCalendars($missing_link_calendars)
    {
        $this->container['missing_link_calendars'] = $missing_link_calendars;

        return $this;
    }

    /**
     * Gets content
     * @return \Swagger\Client\Model\ContentFeedProfileContent[]
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     * @param \Swagger\Client\Model\ContentFeedProfileContent[] $content
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets events
     * @return \Swagger\Client\Model\CalendarPropertiesId[]
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     * @param \Swagger\Client\Model\CalendarPropertiesId[] $events
     * @return $this
     */
    public function setEvents($events)
    {
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets groups
     * @return \Swagger\Client\Model\CalendarPropertiesId[]
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     * @param \Swagger\Client\Model\CalendarPropertiesId[] $groups
     * @return $this
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets carousel
     * @return \Swagger\Client\Model\ContentFeedProfileCarousel[]
     */
    public function getCarousel()
    {
        return $this->container['carousel'];
    }

    /**
     * Sets carousel
     * @param \Swagger\Client\Model\ContentFeedProfileCarousel[] $carousel
     * @return $this
     */
    public function setCarousel($carousel)
    {
        $this->container['carousel'] = $carousel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


