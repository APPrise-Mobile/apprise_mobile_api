<?php
/**
 * Event
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * APPrise Mobile API
 *
 * API for APPrise Mobile Clients
 *
 * OpenAPI spec version: 2.0.0
 * Contact: customercare@apprise-mobile.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Event Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Event implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Event';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_id' => '\Swagger\Client\Model\CalendarPropertiesId',
        'owner' => '\Swagger\Client\Model\CalendarPropertiesId',
        'account' => '\Swagger\Client\Model\CalendarPropertiesId',
        'created' => '\Swagger\Client\Model\CalendarPropertiesCreated',
        'modified' => '\Swagger\Client\Model\CalendarPropertiesCreated',
        'modified_by' => '\Swagger\Client\Model\CalendarPropertiesId',
        'title' => 'string',
        'event_time_zone' => 'string',
        'start_date' => '\Swagger\Client\Model\CalendarPropertiesCreated',
        'end_date' => '\Swagger\Client\Model\CalendarPropertiesCreated',
        'allday' => 'bool',
        'notes' => 'string',
        'notify' => 'bool',
        'calendar' => '\Swagger\Client\Model\CalendarPropertiesId',
        'access_groups' => '\Swagger\Client\Model\CalendarPropertiesId[]',
        'content' => '\Swagger\Client\Model\CalendarPropertiesId[]',
        'integration_id' => 'string',
        'integration_type' => 'string',
        'permissions' => '\Swagger\Client\Model\CalendarPropertiesPermissions',
        'thumbnail_s3_key' => 'string',
        'small_thumbnail_url' => 'string',
        'medium_thumbnail_url' => '\Swagger\Client\Model\EventPropertiesSmallThumbnailUrl',
        'large_thumbnail_url' => '\Swagger\Client\Model\EventPropertiesSmallThumbnailUrl',
        'xlarge_thumbnail_url' => '\Swagger\Client\Model\EventPropertiesSmallThumbnailUrl',
        'thumbnail_job_id' => 'string',
        'thumbnail_job_status' => '\Swagger\Client\Model\ContentPropertiesTranscodeVideoStatus',
        'include_in_feed' => 'bool',
        'display_thumbnail' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'owner' => 'owner',
        'account' => 'account',
        'created' => 'created',
        'modified' => 'modified',
        'modified_by' => 'modifiedBy',
        'title' => 'title',
        'event_time_zone' => 'eventTimeZone',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'allday' => 'allday',
        'notes' => 'notes',
        'notify' => 'notify',
        'calendar' => 'calendar',
        'access_groups' => 'accessGroups',
        'content' => 'content',
        'integration_id' => 'integrationId',
        'integration_type' => 'integrationType',
        'permissions' => 'permissions',
        'thumbnail_s3_key' => 'thumbnailS3Key',
        'small_thumbnail_url' => 'smallThumbnailUrl',
        'medium_thumbnail_url' => 'mediumThumbnailUrl',
        'large_thumbnail_url' => 'largeThumbnailUrl',
        'xlarge_thumbnail_url' => 'xlargeThumbnailUrl',
        'thumbnail_job_id' => 'thumbnailJobId',
        'thumbnail_job_status' => 'thumbnailJobStatus',
        'include_in_feed' => 'includeInFeed',
        'display_thumbnail' => 'displayThumbnail'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'owner' => 'setOwner',
        'account' => 'setAccount',
        'created' => 'setCreated',
        'modified' => 'setModified',
        'modified_by' => 'setModifiedBy',
        'title' => 'setTitle',
        'event_time_zone' => 'setEventTimeZone',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'allday' => 'setAllday',
        'notes' => 'setNotes',
        'notify' => 'setNotify',
        'calendar' => 'setCalendar',
        'access_groups' => 'setAccessGroups',
        'content' => 'setContent',
        'integration_id' => 'setIntegrationId',
        'integration_type' => 'setIntegrationType',
        'permissions' => 'setPermissions',
        'thumbnail_s3_key' => 'setThumbnailS3Key',
        'small_thumbnail_url' => 'setSmallThumbnailUrl',
        'medium_thumbnail_url' => 'setMediumThumbnailUrl',
        'large_thumbnail_url' => 'setLargeThumbnailUrl',
        'xlarge_thumbnail_url' => 'setXlargeThumbnailUrl',
        'thumbnail_job_id' => 'setThumbnailJobId',
        'thumbnail_job_status' => 'setThumbnailJobStatus',
        'include_in_feed' => 'setIncludeInFeed',
        'display_thumbnail' => 'setDisplayThumbnail'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'owner' => 'getOwner',
        'account' => 'getAccount',
        'created' => 'getCreated',
        'modified' => 'getModified',
        'modified_by' => 'getModifiedBy',
        'title' => 'getTitle',
        'event_time_zone' => 'getEventTimeZone',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'allday' => 'getAllday',
        'notes' => 'getNotes',
        'notify' => 'getNotify',
        'calendar' => 'getCalendar',
        'access_groups' => 'getAccessGroups',
        'content' => 'getContent',
        'integration_id' => 'getIntegrationId',
        'integration_type' => 'getIntegrationType',
        'permissions' => 'getPermissions',
        'thumbnail_s3_key' => 'getThumbnailS3Key',
        'small_thumbnail_url' => 'getSmallThumbnailUrl',
        'medium_thumbnail_url' => 'getMediumThumbnailUrl',
        'large_thumbnail_url' => 'getLargeThumbnailUrl',
        'xlarge_thumbnail_url' => 'getXlargeThumbnailUrl',
        'thumbnail_job_id' => 'getThumbnailJobId',
        'thumbnail_job_status' => 'getThumbnailJobStatus',
        'include_in_feed' => 'getIncludeInFeed',
        'display_thumbnail' => 'getDisplayThumbnail'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_id'] = isset($data['_id']) ? $data['_id'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
        $this->container['modified_by'] = isset($data['modified_by']) ? $data['modified_by'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['event_time_zone'] = isset($data['event_time_zone']) ? $data['event_time_zone'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['allday'] = isset($data['allday']) ? $data['allday'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['notify'] = isset($data['notify']) ? $data['notify'] : null;
        $this->container['calendar'] = isset($data['calendar']) ? $data['calendar'] : null;
        $this->container['access_groups'] = isset($data['access_groups']) ? $data['access_groups'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['integration_id'] = isset($data['integration_id']) ? $data['integration_id'] : null;
        $this->container['integration_type'] = isset($data['integration_type']) ? $data['integration_type'] : null;
        $this->container['permissions'] = isset($data['permissions']) ? $data['permissions'] : null;
        $this->container['thumbnail_s3_key'] = isset($data['thumbnail_s3_key']) ? $data['thumbnail_s3_key'] : null;
        $this->container['small_thumbnail_url'] = isset($data['small_thumbnail_url']) ? $data['small_thumbnail_url'] : null;
        $this->container['medium_thumbnail_url'] = isset($data['medium_thumbnail_url']) ? $data['medium_thumbnail_url'] : null;
        $this->container['large_thumbnail_url'] = isset($data['large_thumbnail_url']) ? $data['large_thumbnail_url'] : null;
        $this->container['xlarge_thumbnail_url'] = isset($data['xlarge_thumbnail_url']) ? $data['xlarge_thumbnail_url'] : null;
        $this->container['thumbnail_job_id'] = isset($data['thumbnail_job_id']) ? $data['thumbnail_job_id'] : null;
        $this->container['thumbnail_job_status'] = isset($data['thumbnail_job_status']) ? $data['thumbnail_job_status'] : null;
        $this->container['include_in_feed'] = isset($data['include_in_feed']) ? $data['include_in_feed'] : null;
        $this->container['display_thumbnail'] = isset($data['display_thumbnail']) ? $data['display_thumbnail'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['title'] === null) {
            $invalid_properties[] = "'title' can't be null";
        }
        if ($this->container['start_date'] === null) {
            $invalid_properties[] = "'start_date' can't be null";
        }
        if ($this->container['calendar'] === null) {
            $invalid_properties[] = "'calendar' can't be null";
        }
        if (!is_null($this->container['small_thumbnail_url']) && !preg_match("/^https?://(?:[a-z0-9\\-]+\\.)+[a-z]{2,6}(?:/[^/#?]+)+\\.(?:jpg|gif|png)$/", $this->container['small_thumbnail_url'])) {
            $invalid_properties[] = "invalid value for 'small_thumbnail_url', must be conform to the pattern /^https?://(?:[a-z0-9\\-]+\\.)+[a-z]{2,6}(?:/[^/#?]+)+\\.(?:jpg|gif|png)$/.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['title'] === null) {
            return false;
        }
        if ($this->container['start_date'] === null) {
            return false;
        }
        if ($this->container['calendar'] === null) {
            return false;
        }
        if (!preg_match("/^https?://(?:[a-z0-9\\-]+\\.)+[a-z]{2,6}(?:/[^/#?]+)+\\.(?:jpg|gif|png)$/", $this->container['small_thumbnail_url'])) {
            return false;
        }
        return true;
    }


    /**
     * Gets _id
     * @return \Swagger\Client\Model\CalendarPropertiesId
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     * @param \Swagger\Client\Model\CalendarPropertiesId $_id
     * @return $this
     */
    public function setId($_id)
    {
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets owner
     * @return \Swagger\Client\Model\CalendarPropertiesId
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     * @param \Swagger\Client\Model\CalendarPropertiesId $owner
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets account
     * @return \Swagger\Client\Model\CalendarPropertiesId
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     * @param \Swagger\Client\Model\CalendarPropertiesId $account
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets created
     * @return \Swagger\Client\Model\CalendarPropertiesCreated
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     * @param \Swagger\Client\Model\CalendarPropertiesCreated $created
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     * @return \Swagger\Client\Model\CalendarPropertiesCreated
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     * @param \Swagger\Client\Model\CalendarPropertiesCreated $modified
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets modified_by
     * @return \Swagger\Client\Model\CalendarPropertiesId
     */
    public function getModifiedBy()
    {
        return $this->container['modified_by'];
    }

    /**
     * Sets modified_by
     * @param \Swagger\Client\Model\CalendarPropertiesId $modified_by
     * @return $this
     */
    public function setModifiedBy($modified_by)
    {
        $this->container['modified_by'] = $modified_by;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets event_time_zone
     * @return string
     */
    public function getEventTimeZone()
    {
        return $this->container['event_time_zone'];
    }

    /**
     * Sets event_time_zone
     * @param string $event_time_zone
     * @return $this
     */
    public function setEventTimeZone($event_time_zone)
    {
        $this->container['event_time_zone'] = $event_time_zone;

        return $this;
    }

    /**
     * Gets start_date
     * @return \Swagger\Client\Model\CalendarPropertiesCreated
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param \Swagger\Client\Model\CalendarPropertiesCreated $start_date
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     * @return \Swagger\Client\Model\CalendarPropertiesCreated
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     * @param \Swagger\Client\Model\CalendarPropertiesCreated $end_date
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets allday
     * @return bool
     */
    public function getAllday()
    {
        return $this->container['allday'];
    }

    /**
     * Sets allday
     * @param bool $allday
     * @return $this
     */
    public function setAllday($allday)
    {
        $this->container['allday'] = $allday;

        return $this;
    }

    /**
     * Gets notes
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     * @param string $notes
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets notify
     * @return bool
     */
    public function getNotify()
    {
        return $this->container['notify'];
    }

    /**
     * Sets notify
     * @param bool $notify
     * @return $this
     */
    public function setNotify($notify)
    {
        $this->container['notify'] = $notify;

        return $this;
    }

    /**
     * Gets calendar
     * @return \Swagger\Client\Model\CalendarPropertiesId
     */
    public function getCalendar()
    {
        return $this->container['calendar'];
    }

    /**
     * Sets calendar
     * @param \Swagger\Client\Model\CalendarPropertiesId $calendar
     * @return $this
     */
    public function setCalendar($calendar)
    {
        $this->container['calendar'] = $calendar;

        return $this;
    }

    /**
     * Gets access_groups
     * @return \Swagger\Client\Model\CalendarPropertiesId[]
     */
    public function getAccessGroups()
    {
        return $this->container['access_groups'];
    }

    /**
     * Sets access_groups
     * @param \Swagger\Client\Model\CalendarPropertiesId[] $access_groups
     * @return $this
     */
    public function setAccessGroups($access_groups)
    {
        $this->container['access_groups'] = $access_groups;

        return $this;
    }

    /**
     * Gets content
     * @return \Swagger\Client\Model\CalendarPropertiesId[]
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     * @param \Swagger\Client\Model\CalendarPropertiesId[] $content
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets integration_id
     * @return string
     */
    public function getIntegrationId()
    {
        return $this->container['integration_id'];
    }

    /**
     * Sets integration_id
     * @param string $integration_id
     * @return $this
     */
    public function setIntegrationId($integration_id)
    {
        $this->container['integration_id'] = $integration_id;

        return $this;
    }

    /**
     * Gets integration_type
     * @return string
     */
    public function getIntegrationType()
    {
        return $this->container['integration_type'];
    }

    /**
     * Sets integration_type
     * @param string $integration_type
     * @return $this
     */
    public function setIntegrationType($integration_type)
    {
        $this->container['integration_type'] = $integration_type;

        return $this;
    }

    /**
     * Gets permissions
     * @return \Swagger\Client\Model\CalendarPropertiesPermissions
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     * @param \Swagger\Client\Model\CalendarPropertiesPermissions $permissions
     * @return $this
     */
    public function setPermissions($permissions)
    {
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets thumbnail_s3_key
     * @return string
     */
    public function getThumbnailS3Key()
    {
        return $this->container['thumbnail_s3_key'];
    }

    /**
     * Sets thumbnail_s3_key
     * @param string $thumbnail_s3_key
     * @return $this
     */
    public function setThumbnailS3Key($thumbnail_s3_key)
    {
        $this->container['thumbnail_s3_key'] = $thumbnail_s3_key;

        return $this;
    }

    /**
     * Gets small_thumbnail_url
     * @return string
     */
    public function getSmallThumbnailUrl()
    {
        return $this->container['small_thumbnail_url'];
    }

    /**
     * Sets small_thumbnail_url
     * @param string $small_thumbnail_url
     * @return $this
     */
    public function setSmallThumbnailUrl($small_thumbnail_url)
    {

        if (!is_null($small_thumbnail_url) && (!preg_match("/^https?://(?:[a-z0-9\\-]+\\.)+[a-z]{2,6}(?:/[^/#?]+)+\\.(?:jpg|gif|png)$/", $small_thumbnail_url))) {
            throw new \InvalidArgumentException("invalid value for $small_thumbnail_url when calling Event., must conform to the pattern /^https?://(?:[a-z0-9\\-]+\\.)+[a-z]{2,6}(?:/[^/#?]+)+\\.(?:jpg|gif|png)$/.");
        }

        $this->container['small_thumbnail_url'] = $small_thumbnail_url;

        return $this;
    }

    /**
     * Gets medium_thumbnail_url
     * @return \Swagger\Client\Model\EventPropertiesSmallThumbnailUrl
     */
    public function getMediumThumbnailUrl()
    {
        return $this->container['medium_thumbnail_url'];
    }

    /**
     * Sets medium_thumbnail_url
     * @param \Swagger\Client\Model\EventPropertiesSmallThumbnailUrl $medium_thumbnail_url
     * @return $this
     */
    public function setMediumThumbnailUrl($medium_thumbnail_url)
    {
        $this->container['medium_thumbnail_url'] = $medium_thumbnail_url;

        return $this;
    }

    /**
     * Gets large_thumbnail_url
     * @return \Swagger\Client\Model\EventPropertiesSmallThumbnailUrl
     */
    public function getLargeThumbnailUrl()
    {
        return $this->container['large_thumbnail_url'];
    }

    /**
     * Sets large_thumbnail_url
     * @param \Swagger\Client\Model\EventPropertiesSmallThumbnailUrl $large_thumbnail_url
     * @return $this
     */
    public function setLargeThumbnailUrl($large_thumbnail_url)
    {
        $this->container['large_thumbnail_url'] = $large_thumbnail_url;

        return $this;
    }

    /**
     * Gets xlarge_thumbnail_url
     * @return \Swagger\Client\Model\EventPropertiesSmallThumbnailUrl
     */
    public function getXlargeThumbnailUrl()
    {
        return $this->container['xlarge_thumbnail_url'];
    }

    /**
     * Sets xlarge_thumbnail_url
     * @param \Swagger\Client\Model\EventPropertiesSmallThumbnailUrl $xlarge_thumbnail_url
     * @return $this
     */
    public function setXlargeThumbnailUrl($xlarge_thumbnail_url)
    {
        $this->container['xlarge_thumbnail_url'] = $xlarge_thumbnail_url;

        return $this;
    }

    /**
     * Gets thumbnail_job_id
     * @return string
     */
    public function getThumbnailJobId()
    {
        return $this->container['thumbnail_job_id'];
    }

    /**
     * Sets thumbnail_job_id
     * @param string $thumbnail_job_id
     * @return $this
     */
    public function setThumbnailJobId($thumbnail_job_id)
    {
        $this->container['thumbnail_job_id'] = $thumbnail_job_id;

        return $this;
    }

    /**
     * Gets thumbnail_job_status
     * @return \Swagger\Client\Model\ContentPropertiesTranscodeVideoStatus
     */
    public function getThumbnailJobStatus()
    {
        return $this->container['thumbnail_job_status'];
    }

    /**
     * Sets thumbnail_job_status
     * @param \Swagger\Client\Model\ContentPropertiesTranscodeVideoStatus $thumbnail_job_status
     * @return $this
     */
    public function setThumbnailJobStatus($thumbnail_job_status)
    {
        $this->container['thumbnail_job_status'] = $thumbnail_job_status;

        return $this;
    }

    /**
     * Gets include_in_feed
     * @return bool
     */
    public function getIncludeInFeed()
    {
        return $this->container['include_in_feed'];
    }

    /**
     * Sets include_in_feed
     * @param bool $include_in_feed
     * @return $this
     */
    public function setIncludeInFeed($include_in_feed)
    {
        $this->container['include_in_feed'] = $include_in_feed;

        return $this;
    }

    /**
     * Gets display_thumbnail
     * @return bool
     */
    public function getDisplayThumbnail()
    {
        return $this->container['display_thumbnail'];
    }

    /**
     * Sets display_thumbnail
     * @param bool $display_thumbnail
     * @return $this
     */
    public function setDisplayThumbnail($display_thumbnail)
    {
        $this->container['display_thumbnail'] = $display_thumbnail;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


