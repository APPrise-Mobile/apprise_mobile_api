<?php
/**
 * Group
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * APPrise Mobile API
 *
 * API for APPrise Mobile Clients
 *
 * OpenAPI spec version: 2.0.0
 * Contact: customercare@apprise-mobile.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Group Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Group implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Group';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_id' => '\Swagger\Client\Model\CalendarPropertiesId',
        'owner' => '\Swagger\Client\Model\CalendarPropertiesId',
        'account' => '\Swagger\Client\Model\CalendarPropertiesId',
        'created' => '\Swagger\Client\Model\CalendarPropertiesCreated',
        'modified' => '\Swagger\Client\Model\CalendarPropertiesCreated',
        'modified_by' => '\Swagger\Client\Model\CalendarPropertiesId',
        'content_feed_profiles' => '\Swagger\Client\Model\CalendarPropertiesId[]',
        'manage_type' => 'string',
        'name' => 'string',
        'permissions' => '\Swagger\Client\Model\CalendarPropertiesPermissions',
        'integration_id' => 'string',
        'integration_type' => 'string',
        'job_id' => 'string',
        'job_status' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'owner' => 'owner',
        'account' => 'account',
        'created' => 'created',
        'modified' => 'modified',
        'modified_by' => 'modifiedBy',
        'content_feed_profiles' => 'contentFeedProfiles',
        'manage_type' => 'manageType',
        'name' => 'name',
        'permissions' => 'permissions',
        'integration_id' => 'integrationId',
        'integration_type' => 'integrationType',
        'job_id' => 'jobId',
        'job_status' => 'jobStatus'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'owner' => 'setOwner',
        'account' => 'setAccount',
        'created' => 'setCreated',
        'modified' => 'setModified',
        'modified_by' => 'setModifiedBy',
        'content_feed_profiles' => 'setContentFeedProfiles',
        'manage_type' => 'setManageType',
        'name' => 'setName',
        'permissions' => 'setPermissions',
        'integration_id' => 'setIntegrationId',
        'integration_type' => 'setIntegrationType',
        'job_id' => 'setJobId',
        'job_status' => 'setJobStatus'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'owner' => 'getOwner',
        'account' => 'getAccount',
        'created' => 'getCreated',
        'modified' => 'getModified',
        'modified_by' => 'getModifiedBy',
        'content_feed_profiles' => 'getContentFeedProfiles',
        'manage_type' => 'getManageType',
        'name' => 'getName',
        'permissions' => 'getPermissions',
        'integration_id' => 'getIntegrationId',
        'integration_type' => 'getIntegrationType',
        'job_id' => 'getJobId',
        'job_status' => 'getJobStatus'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const MANAGE_TYPE_ACCOUNT = 'ACCOUNT';
    const MANAGE_TYPE_APP_PROFILE = 'APP_PROFILE';
    const JOB_STATUS_QUEUED = 'QUEUED';
    const JOB_STATUS_PROCESSING = 'PROCESSING';
    const JOB_STATUS_COMPLETED = 'COMPLETED';
    const JOB_STATUS_FAILED = 'FAILED';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getManageTypeAllowableValues()
    {
        return [
            self::MANAGE_TYPE_ACCOUNT,
            self::MANAGE_TYPE_APP_PROFILE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getJobStatusAllowableValues()
    {
        return [
            self::JOB_STATUS_QUEUED,
            self::JOB_STATUS_PROCESSING,
            self::JOB_STATUS_COMPLETED,
            self::JOB_STATUS_FAILED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_id'] = isset($data['_id']) ? $data['_id'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
        $this->container['modified_by'] = isset($data['modified_by']) ? $data['modified_by'] : null;
        $this->container['content_feed_profiles'] = isset($data['content_feed_profiles']) ? $data['content_feed_profiles'] : null;
        $this->container['manage_type'] = isset($data['manage_type']) ? $data['manage_type'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['permissions'] = isset($data['permissions']) ? $data['permissions'] : null;
        $this->container['integration_id'] = isset($data['integration_id']) ? $data['integration_id'] : null;
        $this->container['integration_type'] = isset($data['integration_type']) ? $data['integration_type'] : null;
        $this->container['job_id'] = isset($data['job_id']) ? $data['job_id'] : null;
        $this->container['job_status'] = isset($data['job_status']) ? $data['job_status'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['_id'] === null) {
            $invalid_properties[] = "'_id' can't be null";
        }
        if ($this->container['owner'] === null) {
            $invalid_properties[] = "'owner' can't be null";
        }
        if ($this->container['account'] === null) {
            $invalid_properties[] = "'account' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalid_properties[] = "'created' can't be null";
        }
        $allowed_values = $this->getManageTypeAllowableValues();
        if (!in_array($this->container['manage_type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'manage_type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        $allowed_values = $this->getJobStatusAllowableValues();
        if (!in_array($this->container['job_status'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'job_status', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['_id'] === null) {
            return false;
        }
        if ($this->container['owner'] === null) {
            return false;
        }
        if ($this->container['account'] === null) {
            return false;
        }
        if ($this->container['created'] === null) {
            return false;
        }
        $allowed_values = $this->getManageTypeAllowableValues();
        if (!in_array($this->container['manage_type'], $allowed_values)) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        $allowed_values = $this->getJobStatusAllowableValues();
        if (!in_array($this->container['job_status'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets _id
     * @return \Swagger\Client\Model\CalendarPropertiesId
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     * @param \Swagger\Client\Model\CalendarPropertiesId $_id
     * @return $this
     */
    public function setId($_id)
    {
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets owner
     * @return \Swagger\Client\Model\CalendarPropertiesId
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     * @param \Swagger\Client\Model\CalendarPropertiesId $owner
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets account
     * @return \Swagger\Client\Model\CalendarPropertiesId
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     * @param \Swagger\Client\Model\CalendarPropertiesId $account
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets created
     * @return \Swagger\Client\Model\CalendarPropertiesCreated
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     * @param \Swagger\Client\Model\CalendarPropertiesCreated $created
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     * @return \Swagger\Client\Model\CalendarPropertiesCreated
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     * @param \Swagger\Client\Model\CalendarPropertiesCreated $modified
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets modified_by
     * @return \Swagger\Client\Model\CalendarPropertiesId
     */
    public function getModifiedBy()
    {
        return $this->container['modified_by'];
    }

    /**
     * Sets modified_by
     * @param \Swagger\Client\Model\CalendarPropertiesId $modified_by
     * @return $this
     */
    public function setModifiedBy($modified_by)
    {
        $this->container['modified_by'] = $modified_by;

        return $this;
    }

    /**
     * Gets content_feed_profiles
     * @return \Swagger\Client\Model\CalendarPropertiesId[]
     */
    public function getContentFeedProfiles()
    {
        return $this->container['content_feed_profiles'];
    }

    /**
     * Sets content_feed_profiles
     * @param \Swagger\Client\Model\CalendarPropertiesId[] $content_feed_profiles
     * @return $this
     */
    public function setContentFeedProfiles($content_feed_profiles)
    {
        $this->container['content_feed_profiles'] = $content_feed_profiles;

        return $this;
    }

    /**
     * Gets manage_type
     * @return string
     */
    public function getManageType()
    {
        return $this->container['manage_type'];
    }

    /**
     * Sets manage_type
     * @param string $manage_type
     * @return $this
     */
    public function setManageType($manage_type)
    {
        $allowed_values = $this->getManageTypeAllowableValues();
        if (!is_null($manage_type) && !in_array($manage_type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'manage_type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['manage_type'] = $manage_type;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets permissions
     * @return \Swagger\Client\Model\CalendarPropertiesPermissions
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     * @param \Swagger\Client\Model\CalendarPropertiesPermissions $permissions
     * @return $this
     */
    public function setPermissions($permissions)
    {
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets integration_id
     * @return string
     */
    public function getIntegrationId()
    {
        return $this->container['integration_id'];
    }

    /**
     * Sets integration_id
     * @param string $integration_id
     * @return $this
     */
    public function setIntegrationId($integration_id)
    {
        $this->container['integration_id'] = $integration_id;

        return $this;
    }

    /**
     * Gets integration_type
     * @return string
     */
    public function getIntegrationType()
    {
        return $this->container['integration_type'];
    }

    /**
     * Sets integration_type
     * @param string $integration_type
     * @return $this
     */
    public function setIntegrationType($integration_type)
    {
        $this->container['integration_type'] = $integration_type;

        return $this;
    }

    /**
     * Gets job_id
     * @return string
     */
    public function getJobId()
    {
        return $this->container['job_id'];
    }

    /**
     * Sets job_id
     * @param string $job_id
     * @return $this
     */
    public function setJobId($job_id)
    {
        $this->container['job_id'] = $job_id;

        return $this;
    }

    /**
     * Gets job_status
     * @return string
     */
    public function getJobStatus()
    {
        return $this->container['job_status'];
    }

    /**
     * Sets job_status
     * @param string $job_status
     * @return $this
     */
    public function setJobStatus($job_status)
    {
        $allowed_values = $this->getJobStatusAllowableValues();
        if (!is_null($job_status) && !in_array($job_status, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'job_status', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['job_status'] = $job_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


